#+TITLE: Мой мир фантазий
#+AUTHOR: Ryazansev Vladimir
#+EMAIL: 361elfforest@gmail.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css"/>
#+LANGUAGE:    ru
#+ATTR_HTML: width="1500px"
#+ATTR_ORG: :width 1500
[[./img/header.png]]

| *Author* | {{{author}}} ({{{email}}})    |
| *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}} |

* Настройка системы после установки :linux:
* Зависимости
#+begin_src bash :tangle install.bash :noweb yes
<<spell>>
#+end_src
* bash :bash:
*** Полный код 
#+begin_src bash :tangle ~/.bashrc.test :noweb yes :shebang "#!/bin/bash"
#+end_src
* zsh :zsh:
*** Полный код
#+begin_src bash :tangle ~/.zshrc.test :noweb yes :shebang "#!/bin/bash"
#+end_src
* emacs :emacs:
** xdg
#+NAME: xdg
#+begin_src emacs-lisp
(require 'xdg)
;; Пути к домашним папкам 
(defconst +desktop_dir+      (xdg-user-dir "DESKTOP"    ))
(defconst +download_dir+     (xdg-user-dir "DOWNLOAD"   ))
(defconst +templates_dir+    (xdg-user-dir "TEMPLATES"  ))
(defconst +publicshare_dir+  (xdg-user-dir "PUBLICSHARE"))
(defconst +documents_dir+    (xdg-user-dir "DOCUMENTS"  ))
(defconst +music_dir+        (xdg-user-dir "MUSIC"      ))
(defconst +pictures_dir+     (xdg-user-dir "PICTURES"   ))
(defconst +videos_dir+       (xdg-user-dir "VIDEOS"     ))
#+end_src
** ui
#+NAME: ui
#+begin_src emacs-lisp :noweb yes
<<display-time>>
<<bar>>
<<spaces>>
<<parent>>
#+end_src
*** display-time
#+NAME: display-time
#+begin_src 
(display-time)
(add-hook 'diary-hook 'appt-make-list)
(diary 0)
#+end_src
*** Уберём всё лишнее
#+NAME: bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
*** Пробелы вместо табуляции
#+NAME: spaces
#+begin_src emacs-lisp
;; Пробелы вместо табуляции
(setq-default indent-tabs-mode nil
              tab-width        2)
#+end_src
*** Подсветка парных скобок
#+NAME: parent
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
** package
#+NAME: package
#+begin_src emacs-lisp
;; Install use-package
(require 'package)

(setq package-archives
      '(("gnu"          . "https://elpa.gnu.org/packages/")
        ("melpa"        . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("org"          . "https://orgmode.org/elpa/")))

(setq package-enable-at-startup nil)
(package-initialize nil)

;;; Если пакет use-package не установлен, его нужно скачать и
;;; установить
(unless (package-installed-p 'use-package)
  (message "EMACS install use-package.el")
  (package-refresh-contents)
  (package-install 'use-package))

;;; Установили, загрузили, указали, что недостающие пакеты нужно
;;; автоматически загружать и устанавливать.
(require 'use-package)
(setq use-package-always-ensure t)


(defvar *package-lists-fetched* nil)

(defun soft-fetch-package-lists ()
  (unless *package-lists-fetched*
    (package-refresh-contents)
    (setf *package-lists-fetched* t)))

;; package-installed-p will always report NIL if a newer
;; version is available. We do not want that.
(defun package-locally-installed-p (package)
  (assq package package-alist))

(defun ensure-installed (&rest packages)
  (unless (cl-loop for package in packages
             always (package-locally-installed-p package))
    (soft-fetch-package-lists)
    (dolist (package packages)
      (unless (package-locally-installed-p package)
        (package-install package)))))
#+end_src
** org-mode :org-mode:
#+NAME: org-mode
#+begin_src emacs-lisp :noweb yes
(ensure-installed 'org)
<<template-alist>>
<<org-journal>>
<<deft>>
<<calendar>>
#+end_src
*** template-alist
#+NAME: template-alist
#+begin_src emacs-lisp
(setq org-structure-template-alist
      '(("a" .  "export ascii")
        ("c" .  "center")
        ("C" .  "comment")
        ("e" .  "example")
        ("E" .  "export")
        ("h" .  "export html")
        ("l" .  "export latex")
        ("q" .  "quote")
        ("s" .  "src")
        ("v" .  "verse")
        ("el" . "src emacs-lisp")
        ("b"  . "src bash")))
#+end_src
*** org-journal
https://github.com/bastibe/org-journal/tree/1ea9e3b672ed384922ede6af96598446f3691873
#+NAME: org-journal
#+begin_src emacs-lisp
;; no init file is loaded, so provide everything here:
(ensure-installed 'org-journal)
(setq org-journal-dir (concat +documents_dir+ "/Журнал/")            ; where my journal files are
      org-journal-file-format "%Y-%m-%d.org"  ; their file names
      org-journal-enable-agenda-integration t ; so entries are on the agenda
      org-icalendar-store-UID t               ; so changes sync correctly
      org-icalendar-include-todo "all"        ; include TODOs and DONEs
      org-icalendar-combined-agenda-file (concat +documents_dir+ "/calendar/org-journal.ics"))

(require 'org-journal)
;;(org-journal-update-org-agenda-files) ; put future entries on the agenda
(org-icalendar-combine-agenda-files)  ; export the ICS file
;;(save-buffers-kill-emacs t)           ; save all modified files and exit
(global-set-key [f7] 'org-journal-new-entry)

#+end_src
*** deft
https://github.com/jrblevin/deft/tree/28be94d89bff2e1c7edef7244d7c5ba0636b1296
#+NAME: deft
#+begin_src emacs-lisp
(ensure-installed 'deft)
(setq deft-extensions '("org" "txt" "md")
      deft-directory (concat +documents_dir+ "/Заметки")
      deft-default-extension "org"
      deft-recursive t
      deft-use-filename-as-title nil
      deft-use-filter-string-for-filename t
      deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))

(when (not (file-exists-p  deft-directory))
  (mkdir deft-directory))

(add-to-list 'auto-mode-alist '("notes/.*[.]txt$" . org-mode))

(define-minor-mode deft-note-mode "Deft notes" nil " Deft-Notes" nil)

(setq deft-text-mode 'org-mode)

(defun kill-all-deft-notes ()
  (interactive)
  (save-excursion
    (let((count 0))
      (dolist(buffer (buffer-list))
        (set-buffer buffer)
        (when (not (eq nil deft-note-mode))
          (setq count (1+ count))
          (kill-buffer buffer))))))

(defun deft-or-close () 
  (interactive) (if (or (eq major-mode 'deft-mode) (not (eq nil deft-note-mode)))
  (progn (kill-all-deft-notes) (kill-buffer "*Deft*"))
  (deft)))
(global-set-key [f6] 'deft-or-close)


#+end_src
*** calendar
#+NAME: calendar
#+begin_src emacs-lisp
(setq calendar-week-start-day 1
      calendar-day-name-array ["Воскресенье" "Понедельник" "Вторник" "Среда" "Четверг" "Пятница" "Суббота"]
      calendar-day-header-array ["Вс" "Пн" "Вт" "Ср" "Чт" "Пт" "Сб"]
      calendar-day-abbrev-array ["Вск" "Пнд" "Втр" "Сре" "Чтв" "Птн" "Суб"]
      calendar-month-name-array ["Январь" "Февраль" "Март" "Апрель" "Май" "Июнь" "Июль" "Август" "Сентябрь"
				 "Октябрь" "Ноябрь" "Декабрь"]
      calendar-month-abbrev-array ["Янв" "Фев" "Мар" "Апр" "Май" "Июн" "Июл" "Авг" "Сен" "Окт" "Ноя" "Дек"])

(setq calendar-latitude 51.672
      calendar-longitude 39.1843
      calendar-location-name "Воронежа, Воронежская область, Россия")

(setq diary-file (concat +documents_dir+ "/diary"))

#+end_src
** spell-checking
#+NAME: spell
#+begin_src bash
## Проверка орфографии зависимость `emacs
sudo apt install -y spell aspell aspell-ru ispell
#+end_src


#+NAME: spell-checking
#+begin_src emacs-lisp
(use-package flyspell
 ;  :ensure-system-package (ispell aspell-en aspell-ru)
  :hook ((text-mode . turn-on-flyspell)
         (prog-mode . flyspell-prog-mode))
  :commands (flyspell-buffer turn-on-flyspell)
  :config
  ;; Использовать aspell, если доступен
  (when (executable-find "aspell")
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "--list"))
  ;; ;; Переключаем язык проверки по переключению раскладки
  (defadvice my-select-input-eng (after ispell-american activate) (ispell-change-dictionary "american"))
  (defadvice my-select-input-rus (after ispell-russian activate) (ispell-change-dictionary "ru")))
#+end_src
** Writeroom для работы над текстами
#+NAME: writeroom
#+begin_src emacs-lisp
(ensure-installed 'writeroom-mode)
#+end_src
** Полный код
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :noweb yes :mkdirp yes
(require 'cl-lib)
<<xdg>>

<<ui>>

<<package>>

<<org-mode>>

<<spell-checking>>

(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
* Использованная литература

